version: '3.8'

services:
  # Database Services
  mongodb:
    image: mongo:7
    container_name: commercify_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: commercify
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: mongod --replSet rs0 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - commercify-network

  redis:
    image: redis:7-alpine
    container_name: commercify_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - commercify-network

  # Backend Services
  auth_service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: commercify_auth
    restart: unless-stopped
    environment:
      - SECRET_KEY=your-secret-key-change-in-production
      - MONGO_URI=mongodb://mongodb:27017/commercify
      - FLASK_ENV=development
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python auth_service.py
    networks:
      - commercify-network

  catalog_service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: commercify_catalog
    restart: unless-stopped
    environment:
      - SECRET_KEY=your-secret-key-change-in-production
      - MONGO_URI=mongodb://mongodb:27017/commercify
      - REDIS_URI=redis://redis:6379/0
      - FLASK_ENV=development
    ports:
      - "5001:5001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python catalog_service.py
    networks:
      - commercify-network

  order_service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: commercify_orders
    restart: unless-stopped
    environment:
      - SECRET_KEY=your-secret-key-change-in-production
      - MONGO_URI=mongodb://mongodb:27017/commercify
      - REDIS_URI=redis://redis:6379/0
      - FLASK_ENV=development
    ports:
      - "5002:5002"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python order_service.py
    networks:
      - commercify-network

  websocket_relay:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: commercify_websocket
    restart: unless-stopped
    environment:
      - REDIS_URI=redis://redis:6379/0
      - FLASK_ENV=development
    ports:
      - "5003:5003"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python websocket_relay.py
    networks:
      - commercify-network

  # API Gateway
  nginx:
    image: nginx:alpine
    container_name: commercify_gateway
    restart: unless-stopped
    ports:
      - "8080:8080"  # HTTP API Gateway
      - "8081:8081"  # WebSocket Gateway
    volumes:
      - ./backend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth_service
      - catalog_service
      - order_service
      - websocket_relay
    networks:
      - commercify-network

volumes:
  mongodb_data:
  redis_data:

networks:
  commercify-network:
    driver: bridge